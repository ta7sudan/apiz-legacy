{"version":3,"file":"apiz.umd.js","sources":["../../../src/core.ts","../../../src/querystring.ts","apiz.js"],"sourcesContent":["export type HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\nexport type HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\nexport type HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ninterface APIInfoWithURL<ContentType, Meta> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\ttype?: ContentType;\n\tmeta?: Meta;\n}\n\ninterface APIInfoWithPath<ContentType, Meta> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\ttype?: ContentType;\n\tmeta?: Meta;\n}\n\nexport type APIInfo<ContentType = any, Meta = any> =\n\t| APIInfoWithURL<ContentType, Meta>\n\t| APIInfoWithPath<ContentType, Meta>;\n\nexport interface APIGroup<\n\tT extends Record<string, APIInfo<any, any>> = Record<string, APIInfo<any, any>>\n> {\n\tbaseURL?: string;\n\tapis: T;\n}\n\nexport interface ClientRequestOptions<RawRequestOptions, ContentType, Meta> {\n\turl: string;\n\tname: string;\n\tmeta?: Meta;\n\toptions?: RawRequestOptions;\n\tbody?: any;\n\tparams?: Record<string, string>;\n\tquery?: string | Record<string, any>;\n\theaders?: Record<string, any>;\n\ttype?: ContentType;\n\thandleError?: boolean;\n}\n\nexport type APIzClientRequest<RawRequestOptions, ContentType, Meta> = (\n\toptions: ClientRequestOptions<RawRequestOptions, ContentType, Meta>\n) => Promise<any>;\n\nexport type APIzClient<\nRawRequestOptions,\nContentType,\nMeta,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> = {[k in Method]: APIzClientRequest<RawRequestOptions, ContentType, Meta>};\n\nexport type Serialize2QueryString = (obj: any) => string;\n\nexport interface APIzOptions<\n\tRawRequestOptions,\n\tContentType,\n\tMeta,\n\tMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> {\n\tbaseURL?: string;\n\tclient?: APIzClient<RawRequestOptions, ContentType, Meta, Method>;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\nexport interface GlobalAPIzOptions<\n\tRawRequestOptions,\n\tContentType,\n\tMeta,\n\tMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> {\n\tclient?: APIzClient<RawRequestOptions, ContentType, Meta, Method>;\n\tparamRegex?: RegExp;\n\tdefaultType?: ContentType;\n\treset?: boolean;\n\tquerystring?: (obj: any) => string;\n}\n\ntype Callable = (...args: Array<any>) => any;\n\ninterface ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase> {\n\turl: string;\n\tbaseURL: string;\n\tpath: string;\n\tname: string;\n\tmeta?: Meta;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: Method;\n\ttype?: ContentType;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n\tclient: APIzClient<RawRequestOptions, ContentType, Meta, Method>;\n}\n\ntype ContentTypeFrom<R> = R extends Record<string, APIInfo<infer C, infer M>>\n\t? C extends unknown\n\t\t? any\n\t\t: C\n\t: never;\n\ntype ProxyGroup<RawRequestOptions, T extends Record<string, APIInfo<any, any>>> = {\n\t[k in keyof T]: RequestWithoutThis<RawRequestOptions, ContentTypeFrom<T>>\n};\n\nexport type APIzInstance<\nRawRequestOptions = any,\nT extends Record<string, APIInfo<any, any>> = Record<string, APIInfo<any, any>>,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> = Omit<ProxyGroup<RawRequestOptions, T>, 'add'> & {\n\tadd: (\n\t\tname: string,\n\t\tapiInfo: T extends Record<string, infer I>\n\t\t? I extends APIInfo<infer C, infer M>\n\t\t? APIInfo<C extends unknown ? any : C, M extends unknown ? any : M>\n\t\t: never\n\t\t: never\n\t) => APIzInstance<RawRequestOptions, T, Method>;\n};\n\nexport interface APIzRequestOptions<ContentType> {\n\tbody?: any;\n\tparams?: Record<string, string>;\n\tquery?: string | Record<string, any>;\n\theaders?: Record<string, any>;\n\ttype?: ContentType;\n\thandleError?: boolean;\n}\n\nexport type RequestWithoutThis<RawRequestOptions, ContentType> = (\n\toptions: APIzRequestOptions<ContentType> | RawRequestOptions,\n\tisRawOption?: boolean\n) => Promise<any>;\n\ntype Request<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase> = (\n\tthis: ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>,\n\toptions: APIzRequestOptions<ContentType> | RawRequestOptions,\n\tisRawOption?: boolean\n) => Promise<any>;\n\nexport interface APIzRequest<RawRequestOptions, ContentType, Meta> {\n\t(options: APIzRequestOptions<ContentType> | RawRequestOptions, isRawOption?: boolean): Promise<\n\t\tany\n\t>;\n\treadonly url: string;\n\treadonly method: HTTPMethodUpperCase;\n\treadonly meta: Meta;\n\treadonly type: ContentType;\n}\n\nconst toString = ((Map as unknown) as () => any).call.bind(Object.prototype.toString);\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isObj = (o: any): boolean => toString(o) === '[object Object]';\n\nlet globalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\tglobalClient: APIzClient<any, any, any, any> | undefined,\n\tdefaultType: any;\n\nconst defaultParamRegex = /:((\\w|-)+)/g,\n\tslashRegex = /\\/\\//g,\n\treplaceSlash = (m: string, o: number): string => (o <= 6 ? m : '/');\n\nfunction isAPIInfoWithURL<ContentType, Meta>(v: any): v is APIInfoWithURL<ContentType, Meta> {\n\treturn !!v.url;\n}\n\nfunction parseApiInfo<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase>(\n\tname: string,\n\trawInfo: APIInfo<ContentType, Meta>,\n\t{\n\t\tbaseURL: gBaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t}: {\n\tbaseURL?: string;\n\tparamRegex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tclient: APIzClient<RawRequestOptions, ContentType, Meta, Method>;\n\t}\n): ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method> {\n\tconst {\n\t\tmethod = 'GET' as HTTPMethod,\n\t\ttype = defaultType as ContentType | undefined,\n\t\tmeta\n\t} = rawInfo;\n\tlet url: string | undefined, baseURL: string | undefined, path: string | undefined;\n\n\t// 照理讲放parseApiInfo外面显得更合理一点, 不过考虑到add和实例化的时候都要校验\n\tif (name === 'add') {\n\t\tthrow new Error('\"add\" is preserved key.');\n\t}\n\n\tif (isAPIInfoWithURL<ContentType, Meta>(rawInfo)) {\n\t\turl = rawInfo.url;\n\t} else {\n\t\tbaseURL = rawInfo.baseURL;\n\t\tpath = rawInfo.path;\n\t}\n\n\tconst info = {} as ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, replaceSlash);\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tconst methodUpperCase = method.toUpperCase() as HTTPMethodUpperCase,\n\t\tmethodLowerCase = method.toLowerCase() as Method;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(methodUpperCase)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${methodUpperCase}.`);\n\t}\n\tif (!isFn(client[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tconst parts = info.url.split(/\\/(?=\\w|:)/g),\n\t\toffset = /^(https?:|\\/)/.test(parts[0]) ? 2 : 1;\n\tinfo.baseURL = parts.slice(0, offset).join('/');\n\tinfo.path = `/${parts.slice(offset).join('/')}`;\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = methodUpperCase;\n\tinfo.methodLowerCase = methodLowerCase;\n\tinfo.client = client;\n\tinfo.type = type;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: Record<string, string>): (m: string, v: string) => string | never {\n\treturn (m: string, v: string): string | never => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\nfunction request<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase>(\n\tthis: ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>,\n\toptions?: APIzRequestOptions<ContentType> | RawRequestOptions,\n\tisRawOption?: boolean\n): Promise<any> {\n\t// $以区分全局变量\n\tconst {\n\t\tmethodLowerCase,\n\t\ttype: $defaultType,\n\t\tregex,\n\t\tquerystring,\n\t\tbaseURL,\n\t\tpath,\n\t\tclient,\n\t\tmeta\n\t} = this;\n\tlet qs,\n\t\t// tslint:disable-next-line\n\t\t{query, params, body, headers, type, handleError} = (options as APIzRequestOptions<ContentType> | undefined) || {} as APIzRequestOptions<ContentType>,\n\t\turl = this.url;\n\n\tif (isRawOption === true) {\n\t\treturn client[methodLowerCase]({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\thandleError,\n\t\t\toptions: options as RawRequestOptions | undefined\n\t\t});\n\t}\n\ttype === undefined && (type = $defaultType);\n\n\tif (params) {\n\t\turl = baseURL + path.replace(regex, replaceParams(params));\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\n\treturn client[methodLowerCase]({\n\t\turl,\n\t\tname: this.name,\n\t\thandleError,\n\t\tmeta,\n\t\ttype,\n\t\tbody,\n\t\theaders,\n\t\tquery\n\t});\n}\n\nfunction createAPI<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase>(\n\tinfo: ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>\n): APIzRequest<RawRequestOptions, ContentType, Meta> {\n\tconst fn = request.bind<Request<RawRequestOptions, ContentType, Meta, Method>>(info);\n\n\t['url', 'method', 'meta', 'type'].forEach((k: string) => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: true\n\t\t});\n\t});\n\treturn (fn as unknown) as APIzRequest<RawRequestOptions, ContentType, Meta>;\n}\n\nexport function APIz<\nRawRequestOptions = any,\nContentType = any,\nMeta = any,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase,\nT extends Record<string, APIInfo<ContentType, Meta>> = Record<string, APIInfo<ContentType, Meta>>\n>(\n\tthis: APIzInstance<RawRequestOptions, T, Method>,\n\tgroup: APIGroup<T>,\n\toptions?: APIzOptions<RawRequestOptions, ContentType, Meta, Method>\n): APIzInstance<RawRequestOptions, T, Method> {\n\tconst self = this instanceof APIz ? this : Object.create(APIz.prototype);\n\tlet baseURL: string | undefined,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString | undefined,\n\t\tclient: APIzClient<RawRequestOptions, ContentType, Meta, Method> | undefined;\n\n\tisStr(group.baseURL) && (baseURL = group.baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring,\n\t\tclient = globalClient\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tconst apis = group.apis;\n\n\t// 不用Object.keys, 允许配置对象继承\n\tfor (const key in apis) {\n\t\t// tslint:disable-next-line\n\t\tif (isObj(apis[key])) {\n\t\t\tconst info = parseApiInfo<RawRequestOptions, ContentType, Meta, Method>(\n\t\t\t\tkey,\n\t\t\t\tapis[key],\n\t\t\t\tgroupOptions\n\t\t\t);\n\t\t\tObject.defineProperty(self, key, {\n\t\t\t\tvalue: createAPI(info),\n\t\t\t\twritable: false\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.warn(`The ${key} in group is not an object.`);\n\t\t}\n\t}\n\n\tself.add = function (\n\t\tname: string,\n\t\tapiInfo: APIInfo<ContentType, Meta>\n\t): APIzInstance<RawRequestOptions, T, Method> {\n\t\tif (this[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tconst info = parseApiInfo<RawRequestOptions, ContentType, Meta, Method>(\n\t\t\tname,\n\t\t\tapiInfo,\n\t\t\tgroupOptions\n\t\t);\n\t\tthis[name] = createAPI(info);\n\t\treturn this;\n\t};\n\n\treturn self;\n}\n\nexport function config<\nRawRequestOptions,\nContentType = any,\nMeta = any,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n>(\n\t{\n\t\tquerystring,\n\t\tparamRegex,\n\t\tclient,\n\t\treset,\n\t\tdefaultType: dt\n\t}: GlobalAPIzOptions<RawRequestOptions, ContentType, Meta, Method> = {reset: true}\n): void {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalClient = client;\n\tdefaultType = dt;\n\treset &&\n\t\t(globalQuerystring = globalParamRegex = globalClient = defaultType = undefined);\n}","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj: any): string {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\t(k: string) =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v == null ? '' : v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k] == null ? '' : obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n};","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultType: 'json'\n});\n\nexport * from './core';"],"names":["toString","Map","call","bind","Object","prototype","isStr","s","isFn","f","isObj","o","globalQuerystring","globalParamRegex","globalClient","defaultType","defaultParamRegex","slashRegex","replaceSlash","m","isAPIInfoWithURL","v","url","parseApiInfo","name","rawInfo","gBaseURL","baseURL","paramRegex","querystring","client","method","type","meta","path","Error","info","bURL","TypeError","JSON","stringify","replace","methodUpperCase","toUpperCase","methodLowerCase","toLowerCase","includes","parts","split","offset","test","slice","join","regex","init","replaceParams","params","encodeURIComponent","request","options","isRawOption","$defaultType","qs","query","body","headers","handleError","undefined","createAPI","fn","forEach","k","defineProperty","value","enumerable","writable","APIz","group","self","create","groupOptions","apis","key","console","warn","add","apiInfo","config","reset","dt","RegExp","obj","keys","map","Array","isArray"],"mappings":"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"}